{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","classNameValue","isHightLight","className","onClick","onSquareClick","index","value","Board","squareClickHandler","i","isGameOver","squares","newSquares","slice","nextPlayer","onSquaresChange","renderRow","row","map","col","hightLightSquares","includes","Game","useState","history","Array","fill","winner","location","outOfEmptySquares","move","state","setSate","revertOrder","setRevertOrder","current","convertSquareIndexToLocation","squareIndex","moves","step","description","goToMove","prevState","newNextPlayer","lines","length","a","b","c","calculateWinner","newWinner","newHightLightSquares","newOutOfEmptySquares","newLocation","newHistory","concat","newMove","prevValue","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50b8297e.chunk.js","sourcesContent":["const Square = (props) => {\r\n  const clickHandler = () => {\r\n    props.onSquareClick(props.index);\r\n  };\r\n\r\n  const classNameValue = props.isHightLight ? 'square hight-light' : 'square'\r\n\r\n  return (\r\n    <button className={classNameValue} onClick={clickHandler}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import Square from \"./Square\";\r\n\r\nconst Board = (props) => {\r\n  const squareClickHandler = (i) => {\r\n    if (!props.isGameOver && props.squares[i] === null) {\r\n      let newSquares = props.squares.slice();\r\n      newSquares[i] = props.nextPlayer;\r\n\r\n      props.onSquaresChange(newSquares, i);\r\n    }\r\n  };\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        isHightLight={\r\n          props.hightLightSquares !== null &&\r\n          props.hightLightSquares.includes(i)\r\n        }\r\n        key={i}\r\n        value={props.squares[i]}\r\n        index={i}\r\n        onSquareClick={squareClickHandler}\r\n      />\r\n    );\r\n  };\r\n\r\n  const rows = [0, 1, 2];\r\n\r\n  const renderRow = (row) => {\r\n    let cols = [0, 1, 2];\r\n\r\n    return (\r\n      <div key={row} className=\"board-row\">\r\n        {cols.map((col) => renderSquare(col + row * 3))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <div>{rows.map((row) => renderRow(row))}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import { useState } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n  const [state, setSate] = useState({\r\n    history: [\r\n      {\r\n        squares: Array(9).fill(null),\r\n        nextPlayer: \"X\",\r\n        winner: null,\r\n        location: null,\r\n        hightLightSquares: null,\r\n        outOfEmptySquares: false,\r\n      },\r\n    ],\r\n    move: 0,\r\n  });\r\n\r\n  const [revertOrder, setRevertOrder] = useState(false);\r\n\r\n  const current = state.history[state.move];\r\n\r\n  const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return [squares[a], [a, b, c]];\r\n      }\r\n    }\r\n\r\n    return [null, null];\r\n  };\r\n\r\n  const squaresChangeHandler = (newSquares, squareIndex) => {\r\n    setSate((prevState) => {\r\n      let prevHistory = prevState.history[prevState.move];\r\n      let newNextPlayer = prevHistory.nextPlayer === \"X\" ? \"O\" : \"X\";\r\n\r\n      let [newWinner, newHightLightSquares] = calculateWinner(newSquares);\r\n\r\n      let newOutOfEmptySquares = !newSquares.includes(null);\r\n\r\n      let newLocation = convertSquareIndexToLocation(squareIndex);\r\n\r\n      let newHistory = prevState.history.slice(0, prevState.move + 1).concat([\r\n        {\r\n          squares: newSquares,\r\n          nextPlayer: newNextPlayer,\r\n          winner: newWinner,\r\n          location: newLocation,\r\n          hightLightSquares: newHightLightSquares,\r\n          outOfEmptySquares: newOutOfEmptySquares,\r\n        },\r\n      ]);\r\n\r\n      let newMove = newHistory.length - 1;\r\n\r\n      return {\r\n        ...prevState,\r\n        history: newHistory,\r\n        move: newMove,\r\n      };\r\n    });\r\n  };\r\n\r\n  const convertSquareIndexToLocation = (squareIndex) => {\r\n    let col = (squareIndex % 3) + 1;\r\n\r\n    let row = 1;\r\n    while (squareIndex - 3 >= 0) {\r\n      squareIndex -= 3;\r\n      row++;\r\n    }\r\n\r\n    return { col, row };\r\n  };\r\n\r\n  const getStatus = () => {\r\n    if (current.winner !== null) {\r\n      return `Winner: ${current.winner}`;\r\n    } else if (current.outOfEmptySquares) {\r\n      return \"Result: draw\";\r\n    } else {\r\n      return `Next player: ${current.nextPlayer}`;\r\n    }\r\n  };\r\n\r\n  const goToMove = (step) => {\r\n    setSate({\r\n      ...state,\r\n      move: step,\r\n    });\r\n  };\r\n\r\n  const moves = state.history.map((value, step) => {\r\n    let description = step === 0 ? \"Go to game start\" : `Go to move #${step}`;\r\n    let location =\r\n      value.location === null\r\n        ? \"\"\r\n        : ` (col: ${value.location.col}, row: ${value.location.row})`;\r\n\r\n    let classNameValue = step === state.move ? \"selected\" : \"\";\r\n\r\n    return (\r\n      <li key={step} className={classNameValue}>\r\n        <button onClick={() => goToMove(step)}>\r\n          {description}\r\n          {location}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const toggleHistoryOrder = () => {\r\n    setRevertOrder((prevValue) => !prevValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          nextPlayer={current.nextPlayer}\r\n          isGameOver={current.winner !== null}\r\n          hightLightSquares={current.hightLightSquares}\r\n          onSquaresChange={squaresChangeHandler}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>\r\n          <h3>{getStatus()}</h3>\r\n        </div>\r\n        <div>\r\n          <button onClick={toggleHistoryOrder}>Toggle history order</button>\r\n        </div>\r\n        <ol>{revertOrder ? moves.reverse() : moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}